--- /home/haochenwei/work/cst-origin/cst-3.3.2/code/cst/code/back_end-ssl/src/adapt_layer_openssl.c	2023-04-29 04:45:24.000000000 +0800
+++ /home/haochenwei/work/imx-cst/code/cst/code/back_end-ssl/src/adapt_layer_openssl.c	2023-05-24 15:22:34.600764088 +0800
@@ -64,9 +64,38 @@
 #include "openssl_helper.h"
 #include "pkey.h"
 #include "csf.h"
+#include <sys/stat.h>
 #if (defined _WIN32 || defined __CYGWIN__) && defined USE_APPLINK
 #include <openssl/applink.c>
 #endif
+
+#define ENABLE_VERIFY 0
+#define AUTOX_SIGN 1
+
+#if AUTOX_SIGN
+#include "autox_sign_with_hsm.h"
+
+#define SIGN_SERVER_SIGNED_CSF_OUT_NAME "signed_file_csf.bin"
+#define SIGN_SERVER_SIGNED_IMAGE_OUT_NAME "signed_file_image.bin"
+#define SIGN_SERVER_SIGNED_CSF_IN_NAME "to_sign_file_csf.bin"
+#define SIGN_SERVER_SIGNED_IMAGE_IN_NAME "to_sign_file_image.bin"
+#define SIGN_SERVER_SSL_CERT "sign_server.crt"
+#define SIGN_SERVER_SSL_KEY "sign_server.key"
+#define SIGN_SERVER_ROOT_CA "root_ca.crt"
+#define SIGN_SERVER_API_URL "https://dev.xsec-gateway.autox.tech/v1/signServer/cms/sign?s32g=true"
+#define SIGN_SERVER_CA_URL "https://dev.ca.autox.tech/ejbca/publicweb/webdist/certdist?cmd=cachain&caid=-238079556&format=pem"
+
+int32_t autox_gen_sig_data_cms(const char* in_file,
+                               uint8_t* sig_buf,
+                               size_t *sig_buf_bytes,
+                               char *sig_out_file);
+
+static char autox_signed_file_name[1024] = {0};
+
+#define LOG_DEBUG printf("[AUTOX_SIGN] "); printf
+
+#endif /* AUTOX_SIGN */
+static int32_t autox_write_binary_all(const char *filename, uint8_t *buffer, size_t o_len);
 /*===========================================================================
                                  LOCAL MACROS
 =============================================================================*/
@@ -80,6 +109,74 @@
 /*===========================================================================
                           LOCAL FUNCTION PROTOTYPES
 =============================================================================*/
+#if ENABLE_VERIFY
+
+int32_t
+verify_sig_data_cms(const char *in_file,
+                    const char *cert_ca,
+                    const char *cert_signer,
+                    const char *sig_file,
+                    hash_alg_t hash_alg);
+
+#define DUMP_WIDTH 16
+static void bio_dump(const char *s, int len)
+{
+    char buf[160+1] = {0};
+    char tmp[20] = {0};
+    unsigned char ch;
+    int32_t i, j, rows;
+
+#ifdef TRUNCATE
+    int32_t trunc = 0;
+    for(; (len > 0) && ((s[len-1] == ' ') || (s[len-1] == '\0')); len--)
+        trunc++;
+#endif
+
+    rows = (len / DUMP_WIDTH);
+    if ((rows * DUMP_WIDTH) < len)
+        rows ++;
+    for (i = 0; i < rows; i ++) {
+        /* start with empty string */
+        buf[0] = '\0';
+        sprintf(tmp, "%04x - ", i * DUMP_WIDTH);
+        strcpy(buf, tmp);
+        for (j = 0; j < DUMP_WIDTH; j ++) {
+            if (((i * DUMP_WIDTH) + j) >= len) {
+                strcat(buf,"   ");
+            } else {
+                ch = ((unsigned char)*(s + i * DUMP_WIDTH + j)) & 0xff;
+                sprintf(tmp, "%02x%c" , ch, j == 7 ? '-':' ');
+                strcat(buf, tmp);
+            }
+        }
+        strcat(buf, "  ");
+        for(j = 0;j < DUMP_WIDTH;j ++) {
+            if (((i * DUMP_WIDTH) + j) >= len)
+                break;
+            ch = ((unsigned char)*(s + i * DUMP_WIDTH + j)) & 0xff;
+            sprintf(tmp, "%c", ((ch >= ' ')&&(ch <= '~')) ? ch : '.');
+            strcat(buf, tmp);
+        }
+        strcat(buf, "\n");
+        printf("%s", buf);
+    }
+#ifdef TRUNCATE
+    if (trunc > 0) {
+        sprintf(buf,"%04x - <SPACES/NULS>\n",len+trunc);
+        printf("%s", buf);
+    }
+#endif
+}
+
+void utils_print_bio_array(uint8_t *buffer, size_t len, char* msg)
+{
+    printf("\n");
+    printf("%s: the len is %zu\n", msg, len);
+    bio_dump((const char *)buffer, len);
+    printf("\n");
+}
+
+#endif /* ENABLE_VERIFY */
 
 /** Converts hash_alg to an equivalent NID value for OpenSSL
  *
@@ -160,6 +257,7 @@
  *
  * @retval #CAL_CRYPTO_API_ERROR An Openssl related error has occured
  */
+#if !AUTOX_SIGN
 static int32_t
 gen_sig_data_cms(const char *in_file,
                  const char *cert_file,
@@ -167,6 +265,7 @@
                  hash_alg_t hash_alg,
                  uint8_t *sig_buf,
                  size_t *sig_buf_bytes);
+#endif /* !AUTOX_SIGN */
 
 /** Copies CMS Content Info with encrypted or signature data to buffer
  *
@@ -466,6 +565,7 @@
     int32_t err_value = CAL_SUCCESS;
     BIO * bio_out = NULL;
     BUF_MEM buffer_memory;            /**< Used with BIO functions */
+    (void) bio_in;
 
     buffer_memory.length = 0;
     buffer_memory.data = (char*)data_buffer;
@@ -496,9 +596,239 @@
     return err_value;
 }
 
+#if ENABLE_VERIFY
+
+static int check_verified_signer(CMS_ContentInfo* cms, X509_STORE* store)
+{
+    int i, ret = 1;
+
+    X509_STORE_CTX *ctx = X509_STORE_CTX_new();
+    STACK_OF(CMS_SignerInfo) *infos = CMS_get0_SignerInfos(cms);
+    STACK_OF(X509)* cms_certs = CMS_get1_certs(cms);
+
+    if (!ctx) {
+        LOG_DEBUG("Failed to allocate verification context\n");
+        return ret;
+    }
+
+    for (i = 0; i < sk_CMS_SignerInfo_num(infos) && ret != 0; ++i) {
+        CMS_SignerInfo *si = sk_CMS_SignerInfo_value(infos, i);
+        X509 *signer = NULL;
+
+        CMS_SignerInfo_get0_algs(si, NULL, &signer, NULL, NULL);
+        if (!X509_STORE_CTX_init(ctx, store, signer, cms_certs)) {
+            LOG_DEBUG("Failed to initialize signer verification operation\n");
+            break;
+        }
+
+        X509_STORE_CTX_set_default(ctx, "smime_sign");
+        if (X509_verify_cert(ctx) > 0) {
+            LOG_DEBUG("Verified signature %d in signer sequence\n", i);
+            ret = 0;
+        } else {
+            LOG_DEBUG("Failed to verify certificate %d in signer sequence\n", i);
+        }
+
+        X509_STORE_CTX_cleanup(ctx);
+    }
+
+    X509_STORE_CTX_free(ctx);
+
+    return ret;
+}
+
+static int cms_verify_callback(int ok, X509_STORE_CTX *ctx) {
+    int cert_error = X509_STORE_CTX_get_error(ctx);
+
+    if (!ok) {
+        switch (cert_error) {
+        case X509_V_ERR_CERT_HAS_EXPIRED:
+        case X509_V_ERR_CERT_NOT_YET_VALID:
+            ok = 1;
+            break;
+        default:
+            break;
+        }
+    }
+
+    return ok;
+}
+
+X509_STORE *load_cert_chain(const char *file)
+{
+    X509_STORE *castore = X509_STORE_new();
+    if (!castore) {
+        return NULL;
+    }
+
+    /*
+     * Set error callback function for verification of CRTs and CRLs in order
+     * to ignore some errors depending on configuration
+     */
+    X509_STORE_set_verify_cb(castore, cms_verify_callback);
+
+    BIO *castore_bio = BIO_new_file(file, "r");
+    if (!castore_bio) {
+        LOG_DEBUG("failed: BIO_new_file(%s)\n", file);
+        return NULL;
+    }
+
+    int crt_count = 0;
+    X509 *crt = NULL;
+    do {
+        crt = PEM_read_bio_X509(castore_bio, NULL, 0, NULL);
+        if (crt) {
+            crt_count++;
+            char *subj = X509_NAME_oneline(X509_get_subject_name(crt), NULL, 0);
+            char *issuer = X509_NAME_oneline(X509_get_issuer_name(crt), NULL, 0);
+            LOG_DEBUG("Read PEM #%d: %s %s\n", crt_count, issuer, subj);
+            free(subj);
+            free(issuer);
+            if (X509_STORE_add_cert(castore, crt) == 0) {
+                LOG_DEBUG("Adding certificate to X509_STORE failed\n");
+                BIO_free(castore_bio);
+                X509_STORE_free(castore);
+                return NULL;
+            }
+        }
+    } while (crt);
+    BIO_free(castore_bio);
+
+    if (crt_count == 0) {
+        X509_STORE_free(castore);
+        return NULL;
+    }
+    LOG_DEBUG("The crt_count is %d\n", crt_count);
+
+    return castore;
+}
+
+/*--------------------------
+  gen_sig_data_cms
+---------------------------*/
+int32_t
+verify_sig_data_cms(const char *in_file,
+                    const char *cert_ca,
+                    const char *cert_signer,
+                    const char *sig_file,
+                    hash_alg_t hash_alg)
+
+{
+    BIO             *bio_in = NULL;   /**< BIO for in_file data */
+    BIO             *bio_sigfile = NULL;   /**< BIO for sigfile data */
+    X509_STORE      *store = NULL;     /**< Ptr to X509 certificate read data */
+    X509            *signer_cert = NULL;
+    CMS_ContentInfo *cms = NULL;      /**< Ptr used with openssl API */
+    const EVP_MD    *sign_md = NULL;  /**< Ptr to digest name */
+    int32_t err_value = CAL_SUCCESS;  /**< Used for return value */
+    int32_t rc = 0;
+    /** Array to hold error string */
+    char err_str[MAX_ERR_STR_BYTES];
+    /* flags set to match Openssl command line options for generating
+     *  signatures
+     */
+    int32_t         flags = CMS_DETACHED | CMS_NOCERTS |
+                            CMS_NOSMIMECAP | CMS_BINARY;
+
+    /* Set signature message digest alg */
+    sign_md = EVP_get_digestbyname(get_digest_name(hash_alg));
+    if (sign_md == NULL) {
+        display_error("Invalid hash digest algorithm");
+        return CAL_INVALID_ARGUMENT;
+    }
+
+    do
+    {
+        store = load_cert_chain(cert_ca);
+        if (store == NULL) {
+            snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                     "Cannot open ca certificate file %s", cert_ca);
+            display_error(err_str);
+            err_value = CAL_CRYPTO_API_ERROR;
+            break;
+        }
+
+        signer_cert = read_certificate(cert_signer);
+        if (!signer_cert) {
+            snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                     "Cannot open signer certificate file %s", cert_signer);
+            display_error(err_str);
+            err_value = CAL_CRYPTO_API_ERROR;
+            break;
+        }
+
+        /* Read signature Data */
+        if (!(bio_sigfile = BIO_new_file(sig_file, "rb"))) {
+            snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                     "Cannot open signature file %s", sig_file);
+            display_error(err_str);
+            err_value = CAL_CRYPTO_API_ERROR;
+            break;
+        }
+
+        flags |= CMS_NO_SIGNER_CERT_VERIFY;
+
+        /* Parse the DER-encoded CMS message */
+        cms = d2i_CMS_bio(bio_sigfile, NULL);
+        if (!cms) {
+            display_error("Cannot be parsed as DER-encoded CMS signature blob.\n");
+            err_value = CAL_CRYPTO_API_ERROR;
+            break;
+        }
+
+        if (!CMS_add1_cert(cms, signer_cert)) {
+            display_error("Cannot be inserted signer_cert into cms.\n");
+            err_value = CAL_CRYPTO_API_ERROR;
+            break;
+        }
+
+        /* Open the content file (data which was signed) */
+        if (!(bio_in = BIO_new_file(in_file, "rb"))) {
+            snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                     "Cannot open data which was signed  %s", in_file);
+            display_error(err_str);
+            err_value = CAL_CRYPTO_API_ERROR;
+            break;
+        }
+
+        rc = CMS_verify(cms, NULL, store, bio_in, NULL, flags);
+        if (!rc) {
+            display_error("Failed to verify the file!\n");
+            err_value = CAL_CRYPTO_API_ERROR;
+            break;
+        }
+
+        if (check_verified_signer(cms, store)) {
+            snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                     "Authentication of all signatures failed!\n");
+            err_value = CAL_CRYPTO_API_ERROR;
+            display_error(err_str);
+            break;
+        }
+
+        LOG_DEBUG("Verified OK!\n");
+
+    } while(0);
+
+    /* Print any Openssl errors */
+    if (err_value != CAL_SUCCESS) {
+        ERR_print_errors_fp(stderr);
+    }
+
+    /* Close everything down */
+    if (cms) CMS_ContentInfo_free(cms);
+    if (store) X509_STORE_free(store);
+    if (bio_in) BIO_free(bio_in);
+    if (bio_sigfile)   BIO_free(bio_sigfile);
+
+    return err_value;
+}
+
+#endif /* ENABLE_VERIFY */
 /*--------------------------
   gen_sig_data_cms
 ---------------------------*/
+#if !AUTOX_SIGN
 int32_t
 gen_sig_data_cms(const char *in_file,
                  const char *cert_file,
@@ -601,7 +931,7 @@
 
     return err_value;
 }
-
+#endif /* !AUTOX_SIGN */
 /*--------------------------
   gen_sig_data_ecdsa
 ---------------------------*/
@@ -903,7 +1233,6 @@
 /*===========================================================================
                               GLOBAL FUNCTIONS
 =============================================================================*/
-
 /*--------------------------
   ssl_gen_sig_data
 ---------------------------*/
@@ -916,7 +1245,7 @@
                      func_mode_t mode)
 {
     int32_t err = CAL_SUCCESS; /**< Used for return value */
-    char *key_file;            /**< Mem ptr for key filename */
+    char *key_file = NULL;     /**< Mem ptr for key filename */
 
     /* Check for valid arguments */
     if ((!in_file) || (!cert_file) || (!sig_buf) || (!sig_buf_bytes)) {
@@ -935,7 +1264,6 @@
 
     /* Determine private key filename from given certificate filename */
     key_file = malloc(strlen(cert_file)+1);
-
     err = get_key_file(cert_file, key_file);
     if ( err != CAL_SUCCESS) {
         free(key_file);
@@ -951,8 +1279,42 @@
                                hash_alg, sig_buf, (int32_t *)sig_buf_bytes);
     }
     else if (SIG_FMT_CMS == sig_fmt) {
+#if AUTOX_SIGN
+        err = autox_gen_sig_data_cms(in_file, sig_buf,
+                                     sig_buf_bytes, autox_signed_file_name);
+        if (err != CAL_SUCCESS) {
+            goto finish;
+        }
+        if (*sig_buf_bytes > 1024) {
+            printf("sig_buf_bytes is oversize!!! %lu\n", *sig_buf_bytes);
+            err = CAL_INVALID_SIG_DATA_SIZE;
+            goto finish;
+        }
+#else
         err = gen_sig_data_cms(in_file, cert_file, key_file,
                                hash_alg, sig_buf, sig_buf_bytes);
+        do {
+            char sig_name[1024];
+            sprintf(sig_name, "signed_%s", in_file);
+            (void)autox_write_binary_all(sig_name, sig_buf, *sig_buf_bytes);
+        } while (0);
+#endif /* AUTOX_SIGN */
+    printf("Sign Done! Signature size is %lu\n", *sig_buf_bytes);
+#if ENABLE_VERIFY
+        if (err != CAL_SUCCESS) {
+            goto finish;
+        }
+        const char *autox_ca_cert = "autox_ca_chains.crt";
+        const char *autox_signer_cert = "autox_signer.crt";
+        printf("\n-------------------------[Verify infomation]----------------------\n");
+        printf("original file  : %s\n", in_file);
+        printf("signature file : %s\n", autox_signed_file_name);
+        printf("ca cert        : %s\n", autox_ca_cert);
+        printf("signer cert    : %s\n", autox_signer_cert);
+        printf("hash_alg       : %d\n", hash_alg);
+        printf("--------------------------------------------------------------------\n\n");
+        err = verify_sig_data_cms(in_file, autox_ca_cert, autox_signer_cert, autox_signed_file_name, hash_alg);
+#endif /* ENABLE_VERIFY */
     }
     else if (SIG_FMT_ECDSA == sig_fmt) {
         err = gen_sig_data_ecdsa(in_file, key_file,
@@ -963,11 +1325,232 @@
         display_error("Invalid signature format");
         return CAL_INVALID_ARGUMENT;
     }
+#if ENABLE_VERIFY || AUTOX_SIGN
+finish:
+#endif /* ENABLE_VERIFY */
+    if (key_file != NULL)
+        free(key_file);
+    return err;
+}
+
+static int32_t autox_write_binary_all(const char *filename, uint8_t *buffer, size_t o_len)
+{
+    int32_t ret = 0;
+    FILE *fp = NULL;
 
-    free(key_file);
+    fp = fopen(filename, "wb+");
+    if (fp == NULL) {
+        ret = -1;
+        goto finish;
+    }
+
+    size_t blocks_write = fwrite(buffer, o_len, 1, fp);
+    if (blocks_write != 1) {
+        ret = -1;
+        goto finish;
+    }
+
+finish:
+    if (fp != NULL) fclose(fp);
+    return ret;
+}
+
+#if AUTOX_SIGN
+static int32_t autox_read_binary_all(const char *filename, uint8_t **buffer, size_t *o_len)
+{
+    int32_t ret = 0;
+    struct stat info;
+    FILE *fp = NULL;
+
+    if (stat(filename, &info) != 0) {
+        ret = -1;
+        goto finish;
+    }
+
+    *buffer = (uint8_t *)calloc(1, info.st_size);
+    if (NULL == *buffer) {
+        LOG_DEBUG("Malloc Buffer failed!\n");
+        ret = -1;
+        goto finish;
+    }
+
+    fp = fopen(filename, "rb");
+    if (fp == NULL) {
+        ret = -1;
+        if (*buffer != NULL) {
+            free(*buffer);
+            *buffer = NULL;
+        }
+        goto finish;
+    }
+
+    /* Try to read a single block of info.st_size bytes */
+    size_t blocks_read = fread(*buffer, info.st_size, 1, fp);
+    if (blocks_read != 1) {
+        ret = -1;
+        if (*buffer != NULL) {
+            free(*buffer);
+            *buffer = NULL;
+        }
+        goto finish;
+    }
+
+    *o_len = info.st_size;
+
+finish:
+
+    if (fp != NULL) fclose(fp);
+    return ret;
+}
+
+static int32_t autox_request_sign_data(int32_t srk_num,
+                                       int32_t csf_or_image,
+                                       const char *in_file,
+                                       uint8_t *sig_buf,
+                                       size_t *sig_buf_bytes,
+                                       char *out_name)
+{
+    int32_t err = 0;
+    char err_str[MAX_ERR_STR_BYTES];
+    char *signed_file = NULL;
+    uint8_t *buffer = NULL;
+    const char *ssl_cert = SIGN_SERVER_SSL_CERT;
+    const char *ssl_key = SIGN_SERVER_SSL_KEY;
+    const char *root_ca = SIGN_SERVER_ROOT_CA;
+    const char *url_api = SIGN_SERVER_API_URL;
+
+    UNUSED(srk_num);
+    UNUSED(in_file);
+
+    if (NULL == in_file ||
+        NULL == sig_buf ||
+        NULL == sig_buf_bytes ||
+        NULL == out_name) {
+        snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                "input parameters error!");
+        display_error(err_str);
+        err = CAL_INVALID_ARGUMENT;
+        goto finish;
+    }
+
+    // err = autox_download_root_ca(SIGN_SERVER_API_URL, root_ca);
+    // if (err != 0) {
+    //     snprintf(err_str, MAX_ERR_STR_BYTES-1,
+    //             "download root ca %s failed!", root_ca);
+    //     display_error(err_str);
+    //     err = CAL_INVALID_ARGUMENT;
+    //     goto finish;
+    // }
+
+    signed_file = csf_or_image ? \
+                  SIGN_SERVER_SIGNED_CSF_OUT_NAME : \
+                  SIGN_SERVER_SIGNED_IMAGE_OUT_NAME;
+    strcpy(out_name, signed_file);
+
+    err = autox_sign_with_hsm(in_file,
+                              root_ca,
+                              ssl_cert,
+                              ssl_key,
+                              url_api,
+                              out_name);
+    if (err != 0) {
+        snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                "autox_sign_with_hsm_file_buffer %s failed!", in_file);
+        display_error(err_str);
+        err = CAL_INVALID_ARGUMENT;
+        goto finish;
+    }
+
+    err = autox_read_binary_all(out_name, &buffer, sig_buf_bytes);
+    if (err != 0) {
+        snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                "autox_read_binary_all %s failed!", out_name);
+        display_error(err_str);
+        err = CAL_INVALID_ARGUMENT;
+        goto finish;
+    }
+
+    memcpy(sig_buf, buffer, *sig_buf_bytes);
+
+finish:
+    if (buffer != NULL) {
+        free(buffer);
+    }
     return err;
 }
 
+int32_t autox_gen_sig_data_cms(const char* in_file,
+                               uint8_t* sig_buf,
+                               size_t *sig_buf_bytes,
+                               char *sig_out_file)
+{
+    int32_t err = CAL_SUCCESS; /**< Used for return value */
+    char err_str[MAX_ERR_STR_BYTES];
+    size_t o_len = 0;
+    uint8_t *buffer = NULL;
+
+    if (NULL == in_file ||
+        NULL == sig_buf ||
+        NULL == sig_buf_bytes ||
+        NULL == sig_out_file) {
+        snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                "input parameters error!");
+        err = CAL_INVALID_ARGUMENT;
+        goto finish;
+    }
+
+    LOG_DEBUG("Bypass NXP signing, makes use of the AUTOX's signer!!!!\n");
+
+    char *dup_in_file_name = NULL;
+
+    if (0 == strcmp(in_file, FILE_SIG_IMG_DATA)) {
+        dup_in_file_name = SIGN_SERVER_SIGNED_IMAGE_IN_NAME;
+    } else if (0 == strcmp(in_file, FILE_SIG_CSF_DATA)) {
+        dup_in_file_name = SIGN_SERVER_SIGNED_CSF_IN_NAME;
+    } else {
+        snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                "Internal Error, No %s or %s set!", FILE_SIG_IMG_DATA, FILE_SIG_CSF_DATA);
+        err = CAL_INVALID_ARGUMENT;
+        goto finish;
+    }
+
+    // backup the origin sign file
+    err = autox_read_binary_all(in_file, &buffer, &o_len);
+    if (err != 0) {
+        snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                "input parameters error!");
+        err = CAL_FAILED_FILE_CREATE;
+        goto finish;
+    }
+
+    err = autox_write_binary_all(dup_in_file_name, buffer, o_len);
+    if (err != 0) {
+        snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                "autox_write_binary_all error!");
+        err = CAL_FAILED_FILE_CREATE;
+        goto finish;
+    }
+
+    err = autox_request_sign_data(1,
+                                  0,
+                                  in_file,
+                                  sig_buf,
+                                  sig_buf_bytes,
+                                  sig_out_file);
+    if (err != 0) {
+        snprintf(err_str, MAX_ERR_STR_BYTES-1,
+                "Internal Error, call autox_request_sign_data for %s failed!", in_file);
+        display_error(err_str);
+        goto finish;
+    }
+
+finish:
+    if (buffer != NULL) {
+        free(buffer);
+    }
+    return err;
+}
+#endif /* AUTOX_SIGN */
 /*--------------------------
   generate_dek_key
 ---------------------------*/
